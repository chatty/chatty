import java.util.regex.Matcher

plugins {
    id "com.github.johnrengelman.shadow" version "2.0.4"
}

apply plugin: 'java'

// This seems to fix non-ASCII characters in the code not appearing correctly after compiling
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

sourceCompatibility = 1.8

// Tells Netbeans what the main class is
ext.mainClass = 'chatty.Chatty'

archivesBaseName = 'Chatty'

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['src']
        }
    }
    test {
        java {
            srcDirs = ['test']
        }
        resources {
            srcDirs = ['test']
        }
    }
}

// Method that gets the version name from Chatty.java. It's defined after the sourceSets block because it uses its path
def extractVersion = { ->
    File chattyClassFile = new File((File) sourceSets.main.java.srcDirs.first(), 'chatty/Chatty.java');

    // Use this regex to extract the version from the file
    Matcher matcher = chattyClassFile.text =~ /(?m)^\s*public static final String VERSION = "(.*?)";/

    // From the first matching line, return the first capture (the version)
    return matcher[0][1]
}

version = extractVersion()

dependencies {
    // Take the .jar files from the assets/lib directory and add them to the compile-time classpath
    compile fileTree(dir: 'assets/lib', include: ['*.jar'])

    testCompile 'junit:junit:4.12'
}

// The wrapper is a small batch/bash script that can be used to run Gradle on machines where it hasn't been directly
// installed. It allows you to specify the project's Gradle version for everyone that has checked out the project.
wrapper {
    gradleVersion = '2.13'
}

jar {
    archiveName = "${archivesBaseName}.jar"

    manifest {
        attributes(
                'Main-Class': mainClass,
		//'SplashScreen-Image': 'chatty/splash/splash.png'
        )
    }
}

// Builds a jar that includes not only the compiled files from this project, but also the .class files from the
// dependencies. This removes the need for a separate 'libs' directory when Chatty is installed.
shadowJar {
    // A suffix for the release jar name. By default this is '-all', which gives a name like 'Chatty-v0.8.3b3-all.jar'
    classifier = null

    version = null

    manifest {
        inheritFrom project.tasks.jar.manifest
    }
}

// The following are a series of tasks for building the release artifacts. They are bundled into zip files and placed
// in the 'build/releases' directory.

def releasesDir = new File(buildDir, 'releases')

task allPlatformsZip(type: Zip, group: 'build') {
    dependsOn shadowJar

    from tasks.shadowJar.archivePath
    from ('assets') {
        exclude 'lib'
    }

    destinationDir = releasesDir
    archiveName = "${archivesBaseName}_${version}.zip"
}

task hotkey32Zip(type: Zip, group: 'build') {
    dependsOn shadowJar

    with allPlatformsZip

    from 'assets/lib/dlls/JIntellitype32.dll'
    rename { filename -> filename.replaceAll('JIntellitype\\d{2}', 'JIntellitype') };

    destinationDir = releasesDir
    archiveName = "${archivesBaseName}_${version}_hotkey_32bit.zip"
}

task hotkey64Zip(type: Zip, group: 'build') {
    dependsOn shadowJar

    with allPlatformsZip

    from 'assets/lib/dlls/JIntellitype64.dll'
    rename { filename -> filename.replaceAll('JIntellitype\\d{2}', 'JIntellitype') };

    destinationDir = releasesDir
    archiveName = "${archivesBaseName}_${version}_hotkey_64bit.zip"
}

// Builds all the release zips
task releaseZips(group: 'build') {
    dependsOn allPlatformsZip, hotkey32Zip, hotkey64Zip
}

// Builds the full project, runs the unit tests and packages the release zips.
task release(group: 'build') {
    dependsOn releaseZips, build
}

//--------
// Build standalone package
//--------

def javapackagerBuildDir = new File(buildDir, 'javapackager')

task javapackager(type: Exec, group: 'build') {
    dependsOn shadowJar

    doFirst {
        if (!project.hasProperty('javapackagerPath')) {
            throw new GradleException('Path to javapackager.exe must be defined with -PjavapackagerPath=<path>')
        }
    }
    if (project.hasProperty('javapackagerPath')) {
        def nativeType
        def iconFile
        if (System.properties['os.name'].toLowerCase().contains('windows')) {
            nativeType = 'image'
            iconFile = "assets-bundle/Chatty.ico"
        }
        if (System.properties['os.name'].toLowerCase().contains('mac')) {
            nativeType = 'pkg'
            iconFile = "assets-bundle/Chatty.icns"
        }
        if (project.hasProperty('nativeType')) {
          nativeType = project.getProperty('nativeType')
        }
        def command = [javapackagerPath, '-deploy', '-native', nativeType, '-srcfiles', tasks.shadowJar.archivePath, '-appclass', 'chatty.Chatty', '-outdir', javapackagerBuildDir, '-outfile', 'Chatty']
        if (iconFile) {
            command << "-Bicon=${iconFile}"
        }
        command << "-BappVersion=${version}"
        command << "-BjvmProperties=sun.java2d.d3d=false"
        command << "-BjvmOptions=-Xmx400M"
        if (project.hasProperty('jrePath')) {
            command << "-Bruntime=${jrePath}"
        }
        commandLine command
    }
}

task windowsZip(type: Zip, group: 'build') {
    dependsOn javapackager

    from new File(javapackagerBuildDir, 'bundles/Chatty')
    from ('assets') {
        exclude 'lib'
	into 'app'
    }
    from ('assets/lib/dlls/JIntellitype32.dll') {
        into 'app'
    }
    rename { filename -> filename.replaceAll('JIntellitype\\d{2}', 'JIntellitype') };
    from ('assets-bundle/fallback-fonts') {
        into 'runtime/lib/fonts/fallback'
    }
    from 'assets-bundle/readme-bundle.txt'

    destinationDir = releasesDir
    archiveName = "${archivesBaseName}_${version}_win_standalone.zip"
}

task releaseWindows(group: 'build') {
    dependsOn release, windowsZip
}

//----------
// Innosetup
//----------

def innosetupDir = new File(buildDir, 'innosetup')
def innosetupDir2 = new File(buildDir, 'innosetup2')

def prepareSetupFile(file, to) {
    copy {
            from("setup/"+file) {
                rename(file, "setup.iss")
                expand([
                    applicationVersion: version,
                    code: new File('setup/_functions.iss-part').getText('UTF-8'),
                    setup: new File('setup/_common.iss-part').getText('UTF-8')
                ])
            }
            into(to)
        }
}

task innosetup(type: Exec, group: 'build') {
    dependsOn shadowJar

    doFirst {
        if (!project.hasProperty('innosetupPath')) {
            throw new GradleException('Path to iscc.exe must be defined with -PinnosetupPath=<path>')
        }
	delete innosetupDir
        innosetupDir.mkdir();

        prepareSetupFile("setup.iss-template", innosetupDir)
        copy {
            from(tasks.shadowJar.archivePath)
            from ('assets') {
                exclude 'lib'
    	    }
            from('assets/lib/dlls/JIntellitype32.dll')
            from('assets/lib/dlls/JIntellitype64.dll')
            from('assets-bundle/Chatty.ico')
            into("${innosetupDir}/pack")
        }
        def command = [innosetupPath, "/Q", "${innosetupDir}\\setup.iss"]
        commandLine command
    }
}

task innosetupStandalone(type: Exec, group: 'build') {
    dependsOn javapackager

    doFirst {
        if (!project.hasProperty('innosetupPath')) {
            throw new GradleException('Path to iscc.exe must be defined with -PinnosetupPath=<path>')
        }
	delete innosetupDir2
        innosetupDir2.mkdir();

        prepareSetupFile("setup_standalone.iss-template", innosetupDir2)
        copy {
            from new File(javapackagerBuildDir, 'bundles/Chatty')
            from ('assets') {
                exclude 'lib'
	        into 'app'
            }
            from ('assets/lib/dlls/JIntellitype32.dll') {
                into 'app'
            }
            rename { filename -> filename.replaceAll('JIntellitype\\d{2}', 'JIntellitype') };
            from ('assets-bundle/fallback-fonts') {
                into 'runtime/lib/fonts/fallback'
            }
            from 'assets-bundle/readme-bundle.txt'
            from('assets-bundle/Chatty.ico')
            into("${innosetupDir2}/pack")
        }
        def command = [innosetupPath, "/Q", "${innosetupDir2}\\setup.iss"]
        commandLine command
    }
}

task releaseWinSetups(group: 'build') {
    dependsOn releaseWindows, innosetup, innosetupStandalone, build
}
